// Generated by CoffeeScript 1.4.0

/*
RECORDING
*/


(function() {
  var RECORDING_LIMIT, audio_buffer, context, file_input, init_sound, load_sound_file, play, play_sound, record, source, stop, stop_sound, timecode;

  RECORDING_LIMIT = 10 * 1000;

  timecode = function(ms) {
    var hms, tc;
    hms = {
      h: Math.floor(ms / (60 * 60 * 1000)),
      m: Math.floor((ms / 60000) % 60),
      s: Math.floor(ms / 1000 % 60)
    };
    tc = [];
    if (hms.h > 0) {
      tc.push(hms.h);
    }
    tc.push(hms.m < 10 && hms.h > 0 ? "0" + hms.m : hms.m);
    tc.push(hms.s < 10 ? "0" + hms.s : hms.s);
    return tc.join(':');
  };

  Recorder.initialize({
    swfSrc: "/static/libs/recorder/recorder.swf"
  });

  record = function() {
    return Recorder.record({
      start: function() {
        return console.log('Started recording');
      },
      progress: function(milliseconds) {
        document.getElementById("time").innerHTML = timecode(milliseconds);
        if (milliseconds > RECORDING_LIMIT) {
          return Recorder.stop();
        }
      }
    });
  };

  play = function() {
    Recorder.stop();
    return Recorder.play({
      progress: function(milliseconds) {
        return document.getElementById('time').innerHTML = timecode(milliseconds);
      },
      finished: function() {
        return console.log(Recorder.audioData());
      }
    });
  };

  stop = function() {
    Recorder.stop();
    return play();
  };

  $('#record_button').click(function() {
    return record();
  });

  $('#play_button').click(function() {
    return play();
  });

  $('#stop_button').click(function() {
    return stop();
  });

  /* REVERSING
  */


  context = new window.webkitAudioContext();

  source = null;

  audio_buffer = null;

  stop_sound = function() {
    if (source) {
      return source.noteOff(0);
    }
  };

  play_sound = function() {
    source = context.createBufferSource();
    Array.prototype.reverse.call(audio_buffer.getChannelData(0));
    Array.prototype.reverse.call(audio_buffer.getChannelData(1));
    source.buffer = audio_buffer;
    source.loop = false;
    source.connect(context.destination);
    return source.noteOn(0);
  };

  init_sound = function(array_buffer) {
    return context.decodeAudioData(array_buffer, function(buffer) {
      var buttons;
      audio_buffer = buffer;
      buttons = document.querySelectorAll('button');
      return buttons[0].disabled = false;
    }, function(e) {
      return console.log('Error decoding file', e);
    });
  };

  file_input = document.querySelector('input[type="file"]');

  file_input.addEventListener('change', function(e) {
    var reader;
    reader = new FileReader();
    reader.onload = function(e) {
      console.log(this.result);
      return init_sound(this.result);
    };
    return reader.readAsArrayBuffer(this.files[0]);
  }, false);

  load_sound_file = function(url) {
    var xhr;
    xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.onload = function(e) {
      return init_sound(this.response);
    };
    return xhr.send();
  };

  window.stop_sound = stop_sound;

  window.play_sound = play_sound;

  window.load_sound_file = load_sound_file;

}).call(this);
